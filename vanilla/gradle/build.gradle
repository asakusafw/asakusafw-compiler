/*
 * Copyright 2011-2021 Asakusa Framework Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
ext.parentPom = { f ->
    if (!f.exists()) {
        return null
    }
    def xml = new XmlSlurper().parse(f)
    return [
        projectVersion : xml.version.text(),
        coreVersion : xml['properties']['asakusafw.version'].text(),
        hadoopVersion : xml['properties']['hadoop.version'].text(),
    ]
}(project.file('../../pom.xml')) // I'm on './vanilla/gradle/build.gradle'.

group = 'com.asakusafw.vanilla'
version = parentPom.projectVersion

defaultTasks 'clean', 'build', 'install'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'

configurations {
    deployerJars
}

repositories {
    if (project.hasProperty('mavenLocal')) {
        logger.lifecycle 'enabling maven local repository'
        mavenLocal()
    }
    mavenCentral()
    maven { url 'https://asakusafw.s3.amazonaws.com/maven/releases' }
    maven { url 'https://asakusafw.s3.amazonaws.com/maven/snapshots' }
}

dependencies {
    compile gradleApi()
    compile group: 'com.asakusafw.lang', name: 'asakusa-lang-gradle', version: version
    testCompile gradleTestKit()
    testCompile group: 'com.asakusafw', name: 'asakusa-gradle-plugins', version: parentPom.coreVersion, classifier: 'tests'
    testCompile 'junit:junit:4.12'
    deployerJars 'org.springframework.build:aws-maven:5.0.0.RELEASE'
}

project.sourceCompatibility = JavaVersion.toVersion('1.8')

tasks.withType(AbstractCompile) { task ->
    task.options.encoding = 'UTF-8'
    if (System.getProperty('compiler.bootclasspath') != null) {
        task.options.compilerArgs += ['-bootclasspath', System.getProperty('compiler.bootclasspath')]
    }
}

eclipse.jdt {
    javaRuntimeName = "JavaSE-${sourceCompatibility}"
}
if (project.hasProperty('referProject')) {
    eclipse.classpath.file.whenMerged { classpath ->
        classpath.entries = classpath.entries.collect { entry ->
            if (entry instanceof org.gradle.plugins.ide.eclipse.model.Library \
                    && entry.moduleVersion \
                    && entry.moduleVersion.name in ['asakusa-gradle-plugins', 'asakusa-lang-gradle']) {
                new org.gradle.plugins.ide.eclipse.model.ProjectDependency("/${entry.moduleVersion.name}")
            } else {
                entry
            }
        }.unique() as List
    }
}

groovydoc {
    docTitle "Asakusa Vanilla Gradle Plugins ${version}"
    windowTitle "Asakusa Vanilla Gradle Plugins ${version}"
    footer "Copyright 2011-${new Date().format('yyyy')} Asakusa Framework Team."
}

processResources {
    File outputFile = new File(destinationDir, 'META-INF/asakusa-vanilla-gradle/artifact.properties')
    inputs.properties parentPom
    outputs.file outputFile
    doLast {
        logger.info "injecting artifact versions: ${parentPom}"
        if (!outputFile.parentFile.exists()) {
            project.mkdir outputFile.parentFile
        }

        Properties p = new Properties()
        p.put('feature-version', parentPom.projectVersion)
        p.put("core-version", parentPom.coreVersion)
        p.put('hadoop-version', parentPom.hadoopVersion)
        outputFile.withOutputStream { s ->
            p.store(s, null)
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = project.configurations.deployerJars
            repository id: 'com.asakusafw.releases', url: 's3://asakusafw/maven/releases'
            snapshotRepository id: 'com.asakusafw.snapshots', url: 's3://asakusafw/maven/snapshots'
        }
    }
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives tasks.sourcesJar
}
